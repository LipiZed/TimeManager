@model DayViewModel
@{
    ViewData["Title"] = $"Расписание на {GetRussianDayName(Model.Day)}";
}

<div class="container">
    <h1 class="mt-4 mb-4">Расписание на @GetRussianDayName(Model.Day)</h1>

    <div class="mb-4">
        <a asp-action="Index" class="btn btn-secondary mb-3">
            <i class="bi bi-arrow-left"></i> Вернуться к неделе
        </a>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addObjectiveModal">
            <i class="bi bi-plus-circle"></i> Добавить задачу
        </button>
    </div>

    <div class="timeline-container">
        @for (int hour = 0; hour < 24; hour++)
        {
            <div class="timeline-hour" id="hour-@hour">
                <div class="hour-label">@hour:00</div>
                <div class="hour-content"></div>
            </div>
        }

        @{
            var objectives = Model.Objectives.OrderBy(o => o.StartTime).ToList();
            var columns = new List<List<Objective>>();
            foreach (var objective in objectives)
            {
                bool placed = false;
                foreach (var column in columns)
                {
                    var lastInColumn = column.Last();
                    bool intersects = objective.StartTime < (lastInColumn.EndTime ?? lastInColumn.StartTime.AddHours(1));
                    if (!intersects)
                    {
                        column.Add(objective);
                        placed = true;
                        break;
                    }
                }
                if (!placed)
                {
                    columns.Add(new List<Objective> { objective });
                }
            }

            int columnCount = columns.Count;
            double columnWidth = columnCount > 0 ? 100.0 / columnCount : 100.0;
            double marginPercent = 2.0;

            for (int colIndex = 0; colIndex < columns.Count; colIndex++)
            {
                var column = columns[colIndex];
                foreach (var objective in column)
                {
                    double startMinutes = (objective.StartTime.Hour * 60) + objective.StartTime.Minute;
                    double endMinutes = objective.EndTime.HasValue
                        ? (objective.EndTime.Value.Hour * 60) + objective.EndTime.Value.Minute
                        : startMinutes + 60;
                    double top = startMinutes;
                    double height = Math.Max(endMinutes - startMinutes, 30);
                    double leftPosition = (colIndex * columnWidth) + marginPercent;
                    double rightPosition = ((colIndex + 1) * columnWidth) - marginPercent;

                    <div class="objective-container @(objective.IsCompleted ? "completed" : "upcoming")"
                         data-objective-id="@objective.ObjectiveId"
                         style="top: @(top)px; height: @(height)px; left: @(leftPosition)%; right: @(100 - rightPosition)%;"
                         onclick="showObjectiveDetails(@objective.ObjectiveId)">
                        <div class="objective-content">
                            <div class="objective-icon">
                                <i class="bi @(objective.IsCompleted ? "bi-check-circle" : "bi-calendar-event")"></i>
                            </div>
                            <div class="objective-main-info">
                                <div class="objective-title">@objective.Title</div>
                                <div class="objective-time">
                                    @objective.StartTime.ToString("HH:mm") - @(objective.EndTime?.ToString("HH:mm") ?? "—")
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

<!-- Модальное окно добавления -->
<div class="modal fade" id="addObjectiveModal" tabindex="-1" aria-labelledby="addObjectiveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addObjectiveModalLabel">Добавить новую задачу</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="AddObjective" method="post" id="addObjectiveForm" onsubmit="return validateForm('addObjectiveForm')">
                    <input type="hidden" name="day" value="@Model.Day" />
                    <div class="mb-3">
                        <label for="addTitle" class="form-label">Название:</label>
                        <input type="text" class="form-control" id="addTitle" name="Title" required />
                        <div class="invalid-feedback">Пожалуйста, введите название задачи</div>
                    </div>
                    <div class="mb-3">
                        <label for="addDescription" class="form-label">Описание:</label>
                        <textarea class="form-control" id="addDescription" name="Description" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="addStartTime" class="form-label">Время начала:</label>
                            <input type="datetime-local" class="form-control" id="addStartTime" name="StartTime" required />
                            <div class="invalid-feedback">Пожалуйста, выберите время начала</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="addEndTime" class="form-label">Время окончания:</label>
                            <input type="datetime-local" class="form-control" id="addEndTime" name="EndTime" />
                            <div class="invalid-feedback">Время окончания должно быть позже времени начала</div>
                        </div>
                    </div>
                    <div class="form-check mb-3">
                        <input type="hidden" name="AddReminder" value="false" />
                        <input class="form-check-input" type="checkbox" id="addReminder" name="AddReminder" value="true" />
                        <label class="form-check-label" for="addReminder">Добавить напоминание</label>
                    </div>
                    <div id="addReminderSection" class="mb-3 d-none">
                        <label for="addReminderTime" class="form-label">Время напоминания:</label>
                        <input type="datetime-local" class="form-control" id="addReminderTime" name="ReminderTime" />
                        <div class="invalid-feedback">Время напоминания должно быть раньше времени начала задачи</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="submitForm('addObjectiveForm')">Сохранить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно деталей -->
<div class="modal fade" id="objectiveDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="objectiveDetailsTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="objectiveDetailsTime" class="mb-3 text-muted"></div>
                <div id="objectiveDetailsDescription" class="mb-3"></div>
                <div id="objectiveDetailsStatus" class="mb-3">
                    <span class="badge" id="objectiveStatusBadge"></span>
                </div>
                <div id="objectiveDetailsReminder" class="mb-3">
                    <h6>Напоминание:</h6>
                    <span id="reminderTime"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                <button type="button" class="btn btn-success" id="completeObjectiveBtn"
                        onclick="completeObjective()">Отметить выполненным</button>
                <button type="button" class="btn btn-primary" onclick="showEditFromDetails()">Редактировать</button>
                <button type="button" class="btn btn-danger" onclick="showDeleteFromDetails()">Удалить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно редактирования -->
<div class="modal fade" id="editObjectiveModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактировать задачу</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="EditObjective" method="post" id="editObjectiveForm" onsubmit="return validateForm('editObjectiveForm')">
                    <input type="hidden" name="ObjectiveId" id="editObjectiveId" />
                    <input type="hidden" name="day" value="@Model.Day" />
                    <div class="mb-3">
                        <label for="editTitle" class="form-label">Название:</label>
                        <input type="text" class="form-control" id="editTitle" name="Title" required />
                        <div class="invalid-feedback">Пожалуйста, введите название задачи</div>
                    </div>
                    <div class="mb-3">
                        <label for="editDescription" class="form-label">Описание:</label>
                        <textarea class="form-control" id="editDescription" name="Description" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="editStartTime" class="form-label">Время начала:</label>
                            <input type="datetime-local" class="form-control" id="editStartTime" name="StartTime" required />
                            <div class="invalid-feedback">Пожалуйста, выберите время начала</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="editEndTime" class="form-label">Время окончания:</label>
                            <input type="datetime-local" class="form-control" id="editEndTime" name="EndTime" />
                            <div class="invalid-feedback">Время окончания должно быть позже времени начала</div>
                        </div>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="editIsCompleted" name="IsCompleted" />
                        <label class="form-check-label" for="editIsCompleted">Задача выполнена</label>
                    </div>
                    <div class="form-check mb-3">
                        <input type="hidden" name="AddReminder" value="false" />
                        <input class="form-check-input" type="checkbox" id="editAddReminder" name="AddReminder" value="true" />
                        <label class="form-check-label" for="editAddReminder">Добавить/изменить напоминание</label>
                    </div>
                    <div id="editReminderSection" class="mb-3 d-none">
                        <label for="editReminderTime" class="form-label">Время напоминания:</label>
                        <input type="datetime-local" class="form-control" id="editReminderTime" name="ReminderTime" />
                        <div class="invalid-feedback">Время напоминания должно быть раньше времени начала задачи</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="submitForm('editObjectiveForm')">Обновить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно удаления -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Подтверждение удаления</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Вы действительно хотите удалить эту задачу?</p>
                <p><strong>Название: </strong><span id="deleteObjectiveTitle"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Удалить</button>
            </div>
        </div>
    </div>
</div>

@functions {
    public string GetRussianDayName(DayOfWeek day)
    {
        switch (day)
        {
            case DayOfWeek.Monday: return "Понедельник";
            case DayOfWeek.Tuesday: return "Вторник";
            case DayOfWeek.Wednesday: return "Среда";
            case DayOfWeek.Thursday: return "Четверг";
            case DayOfWeek.Friday: return "Пятница";
            case DayOfWeek.Saturday: return "Суббота";
            case DayOfWeek.Sunday: return "Воскресенье";
            default: return day.ToString();
        }
    }
}

@section Scripts {
    <script>
        let currentObjectiveId = null;

        // Добавим эту функцию в JavaScript для отображения названий дней недели
        // В функцию validateForm добавим проверку соответствия дня недели
        function validateForm(formId) {
            const form = document.getElementById(formId);
            const formElements = form.elements;
            let isValid = true;

            // Текущий день недели страницы
            const currentPageDay = @((int)Model.Day);

            // Сброс предыдущих ошибок
            const invalidFields = form.querySelectorAll('.is-invalid');
            invalidFields.forEach(field => field.classList.remove('is-invalid'));

            // Проверка названия
            const titleInput = formId === 'addObjectiveForm' ? formElements.Title : document.getElementById('editTitle');
            if (!titleInput.value.trim()) {
                titleInput.classList.add('is-invalid');
                isValid = false;
            }

            // Обработка пустого описания - заменяем пустое описание на пробел
            const descriptionInput = formId === 'addObjectiveForm' ?
                formElements.Description : document.getElementById('editDescription');
            if (!descriptionInput.value.trim()) {
                descriptionInput.value = " ";
            }

            // Проверка времени начала
            const startTimeInput = formId === 'addObjectiveForm' ?
                formElements.StartTime : document.getElementById('editStartTime');
            if (!startTimeInput.value) {
                startTimeInput.classList.add('is-invalid');
                isValid = false;
            } else {
                // Проверка совпадения дня недели
                const selectedDate = new Date(startTimeInput.value);
                const selectedDay = selectedDate.getDay();

                // Преобразование из JS-формата (вс=0, пн=1) в ваш формат (пн=0, вт=1)
                // Если selectedDay=0 (воскресенье), то adjustedSelectedDay=6
                // Если selectedDay=1-6 (пн-сб), то adjustedSelectedDay=selectedDay-1 (0-5)
                const adjustedSelectedDay = selectedDay === 0 ? 6 : selectedDay - 1;

                if (adjustedSelectedDay !== currentPageDay) {
                    startTimeInput.classList.add('is-invalid');
                    // Добавляем собственное сообщение об ошибке
                    const dayError = document.createElement('div');
                    dayError.className = 'invalid-feedback';
                    dayError.textContent = `Выбрана дата для "${GetRussianDayName(adjustedSelectedDay)}", но вы находитесь на странице "${GetRussianDayName(currentPageDay)}"`;

                    // Удаляем предыдущее сообщение об ошибке, если оно есть
                    const prevDayError = startTimeInput.parentNode.querySelector('.invalid-feedback-day');
                    if (prevDayError) {
                        prevDayError.remove();
                    }

                    dayError.classList.add('invalid-feedback-day');
                    startTimeInput.parentNode.appendChild(dayError);
                    isValid = false;
                }
            }

            // Проверка времени окончания, если указано
            const endTimeInput = formId === 'addObjectiveForm' ?
                formElements.EndTime : document.getElementById('editEndTime');
            if (endTimeInput.value) {
                const startTime = new Date(startTimeInput.value);
                const endTime = new Date(endTimeInput.value);

                if (endTime <= startTime) {
                    endTimeInput.classList.add('is-invalid');
                    isValid = false;
                }

                // Проверка совпадения дня недели для времени окончания
                const selectedEndDay = endTime.getDay();
                const adjustedSelectedEndDay = selectedEndDay === 0 ? 6 : selectedEndDay - 1;

                if (adjustedSelectedEndDay !== currentPageDay) {
                    endTimeInput.classList.add('is-invalid');
                    // Добавляем собственное сообщение об ошибке
                    const dayError = document.createElement('div');
                    dayError.className = 'invalid-feedback';
                    dayError.textContent = `Выбрана дата окончания для "${GetRussianDayName(adjustedSelectedEndDay)}", но вы находитесь на странице "${GetRussianDayName(currentPageDay)}"`;

                    // Удаляем предыдущее сообщение об ошибке, если оно есть
                    const prevDayError = endTimeInput.parentNode.querySelector('.invalid-feedback-day');
                    if (prevDayError) {
                        prevDayError.remove();
                    }

                    dayError.classList.add('invalid-feedback-day');
                    endTimeInput.parentNode.appendChild(dayError);
                    isValid = false;
                }
            }

            // Проверка времени напоминания, если выбрано
            const reminderCheckbox = formId === 'addObjectiveForm' ?
                formElements.AddReminder : document.getElementById('editAddReminder');
            if (reminderCheckbox.checked) {
                const reminderTimeInput = formId === 'addObjectiveForm' ?
                    formElements.ReminderTime : document.getElementById('editReminderTime');
                if (!reminderTimeInput.value) {
                    reminderTimeInput.classList.add('is-invalid');
                    isValid = false;
                } else {
                    const startTime = new Date(startTimeInput.value);
                    const reminderTime = new Date(reminderTimeInput.value);

                    if (reminderTime >= startTime) {
                        reminderTimeInput.classList.add('is-invalid');
                        isValid = false;
                    }
                }
            }

            return isValid;
        }

        // Функция для получения русских названий дней недели в JavaScript
        function GetRussianDayName(dayIndex) {
            // dayIndex - принимает значения от 0 до 6, где 0 - понедельник, 6 - воскресенье
            const daysRussian = [
                'Понедельник',   // 0
                'Вторник',       // 1
                'Среда',         // 2
                'Четверг',       // 3
                'Пятница',       // 4
                'Суббота',       // 5
                'Воскресенье'    // 6
            ];

            return daysRussian[dayIndex] || 'Неизвестный день';
        }

        function submitForm(formId) {
            if (validateForm(formId)) {
                document.getElementById(formId).submit();
            }
        }

        async function showObjectiveDetails(objectiveId) {
            currentObjectiveId = objectiveId;
            const response = await fetch(`/Schedule/GetObjective?objectiveId=${objectiveId}`);
            const data = await response.json();

            document.getElementById('objectiveDetailsTitle').textContent = data.title;
            document.getElementById('objectiveDetailsTime').textContent =
                `${new Date(data.startTime).toLocaleTimeString()} - ${data.endTime ? new Date(data.endTime).toLocaleTimeString() : '—'}`;
            document.getElementById('objectiveDetailsDescription').textContent = data.description || 'Нет описания';
            const statusBadge = document.getElementById('objectiveStatusBadge');
            statusBadge.textContent = data.isCompleted ? 'Выполнено' : 'В процессе';
            statusBadge.className = `badge ${data.isCompleted ? 'bg-success' : 'bg-warning'}`;

            const reminderSection = document.getElementById('objectiveDetailsReminder');
            const reminderTime = document.getElementById('reminderTime');
            if (data.reminderTime) {
                reminderSection.classList.remove('d-none');
                reminderTime.textContent = new Date(data.reminderTime).toLocaleString();
            } else {
                reminderSection.classList.add('d-none');
            }

            new bootstrap.Modal(document.getElementById('objectiveDetailsModal')).show();
        }

        async function showEditModal(objectiveId) {
            currentObjectiveId = objectiveId;
            const response = await fetch(`/Schedule/GetObjective?objectiveId=${objectiveId}`);
            const data = await response.json();

            document.getElementById('editObjectiveId').value = data.objectiveId;
            document.getElementById('editTitle').value = data.title;
            document.getElementById('editDescription').value = data.description || '';
            document.getElementById('editStartTime').value = data.startTime;
            document.getElementById('editEndTime').value = data.endTime || '';
            document.getElementById('editIsCompleted').checked = data.isCompleted;
            document.getElementById('editAddReminder').checked = !!data.reminderTime;
            document.getElementById('editReminderTime').value = data.reminderTime || '';
            document.getElementById('editReminderSection').classList.toggle('d-none', !data.reminderTime);

            new bootstrap.Modal(document.getElementById('editObjectiveModal')).show();
        }

        function showDeleteModal(objectiveId, title) {
            currentObjectiveId = objectiveId;
            document.getElementById('deleteObjectiveTitle').textContent = title;
            new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
        }

        function showEditFromDetails() {
            document.getElementById('objectiveDetailsModal').querySelector('.btn-close').click();
            showEditModal(currentObjectiveId);
        }

        function showDeleteFromDetails() {
            document.getElementById('objectiveDetailsModal').querySelector('.btn-close').click();
            const title = document.getElementById('objectiveDetailsTitle').textContent;
            showDeleteModal(currentObjectiveId, title);
        }

        async function completeObjective() {
            await fetch(`/Schedule/CompleteObjective`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `objectiveId=${currentObjectiveId}&day=${@((int)Model.Day)}`
            });
            location.reload();
        }

        document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
            await fetch(`/Schedule/DeleteObjective`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `objectiveId=${currentObjectiveId}&day=${@((int)Model.Day)}`
            });
            location.reload();
        });

        document.getElementById('addReminder').addEventListener('change', function () {
            document.getElementById('addReminderSection').classList.toggle('d-none', !this.checked);
            if (!this.checked) {
                document.getElementById('addReminderTime').value = '';
            }
        });

        document.getElementById('editAddReminder').addEventListener('change', function () {
            document.getElementById('editReminderSection').classList.toggle('d-none', !this.checked);
            if (!this.checked) {
                document.getElementById('editReminderTime').value = '';
            }
        });
    </script>
}