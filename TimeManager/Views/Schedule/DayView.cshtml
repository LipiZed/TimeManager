@model DayViewModel
@{
    ViewData["Title"] = $"Расписание на {GetRussianDayName(Model.Day)}";
}

<div class="container">
    <h1 class="mt-4 mb-4">Расписание на @GetRussianDayName(Model.Day)</h1>

    <div class="mb-4">
        <a asp-action="Index" class="btn btn-secondary mb-3">
            <i class="bi bi-arrow-left"></i> Вернуться к неделе
        </a>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addObjectiveModal">
            <i class="bi bi-plus-circle"></i> Добавить задачу
        </button>
    </div>

    <div class="timeline-container">
        @for (int hour = 0; hour < 24; hour++)
        {
            <div class="timeline-hour" id="hour-@hour">
                <div class="hour-label">@hour:00</div>
                <div class="hour-content"></div>
            </div>
        }

        @{
            // Группировка задач по времени (с точностью до 30 минут)
            var taskGroups = new Dictionary<string, List<Objective>>();

            foreach (var objective in Model.Objectives.OrderBy(o => o.StartTime))
            {
                // Ключ группировки - час и округленные минуты (до 30)
                string timeKey = $"{objective.StartTime.Hour}:{(objective.StartTime.Minute / 30) * 30}";

                if (!taskGroups.ContainsKey(timeKey))
                {
                    taskGroups[timeKey] = new List<Objective>();
                }

                taskGroups[timeKey].Add(objective);
            }

            // Отображаем все задачи по группам
            foreach (var group in taskGroups)
            {
                string[] timeParts = group.Key.Split(':');
                int hour = int.Parse(timeParts[0]);
                int minute = int.Parse(timeParts[1]);

                // Вычисляем позицию в пикселях
                int topPosition = hour * 60 + minute;

                if (group.Value.Count == 1)
                {
                    // Одиночная задача
                    var objective = group.Value.First();
                    int durationMinutes = 60;
                    if (objective.EndTime.HasValue)
                    {
                        durationMinutes = (int)(objective.EndTime.Value - objective.StartTime).TotalMinutes;
                    }
                    int heightPixels = Math.Max(durationMinutes, 30); // минимум 30px высота

                    <div class="objective-container @(objective.IsCompleted ? "completed" : "upcoming")"
                         data-objective-id="@objective.ObjectiveId"
                         style="top: @(topPosition)px; height: @(heightPixels)px;"
                         onclick="showObjectiveDetails(@objective.ObjectiveId)">
                        <div class="objective-content">
                            <div class="objective-icon">
                                <i class="bi @(objective.IsCompleted ? "bi-check-circle" : "bi-calendar-event")"></i>
                            </div>
                            <div class="objective-main-info">
                                <div class="objective-title">@objective.Title</div>
                                <div class="objective-time">
                                    @objective.StartTime.ToString("HH:mm") - @(objective.EndTime?.ToString("HH:mm") ?? "—")
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    // Группа задач - компактный вид
                    var groupId = $"task-group-{hour}-{minute}";
                    var completedCount = group.Value.Count(o => o.IsCompleted);
                    var formattedTime = DateTime.ParseExact($"{hour}:{minute}", "H:m", null).ToString("HH:mm");

                    <div class="objective-container task-group-compact"
                         id="@groupId"
                         style="top: @(topPosition)px; height: auto; min-height: 40px;"
                         onclick="toggleTaskGroup('@groupId')">
                        <div class="objective-content task-group-badge" style="width: 300px">
                            <div class="objective-icon">
                                <i class="bi bi-collection"></i>
                            </div>
                            <div class="objective-main-info">
                                <div class="objective-title">
                                    <span class="group-time">@formattedTime</span>
                                    <span class="task-counter">@group.Value.Count задач</span>
                                </div>
                                <div class="objective-time">
                                    <span class="completion-text">Выполнено: @completedCount из @group.Value.Count</span>
                                    <div class="progress-bar">
                                        <div class="progress" style="width: @(completedCount * 100 / Math.Max(1, group.Value.Count))%"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="expand-icon">
                                <i class="bi bi-chevron-down"></i>
                            </div>
                        </div>

                        <div class="task-group-expanded"  id="@(groupId)-expanded">
                            @foreach (var objective in group.Value)
                            {
                                <div class="objective-list-item @(objective.IsCompleted ? "completed" : "upcoming")"
                                     onclick="showObjectiveDetails(@objective.ObjectiveId); event.stopPropagation();" style="width: 700px">
                                    <div class="objective-icon">
                                        <i class="bi @(objective.IsCompleted ? "bi-check-circle" : "bi-calendar-event")"></i>
                                    </div>
                                    <div class="objective-main-info">
                                        <div class="objective-title">@objective.Title</div>
                                        <div class="objective-time">
                                            @objective.StartTime.ToString("HH:mm") - @(objective.EndTime?.ToString("HH:mm") ?? "—")
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        }
    </div>

    <script>
        function toggleTaskGroup(groupId) {
            const expandedSection = document.getElementById(groupId + '-expanded');
            const groupElement = document.getElementById(groupId);
            const expandIcon = groupElement.querySelector('.expand-icon i');

            if (expandedSection.classList.contains('active')) {
                expandedSection.classList.remove('active');
                expandIcon.classList.remove('bi-chevron-up');
                expandIcon.classList.add('bi-chevron-down');
                groupElement.style.height = 'auto';
                groupElement.style.minHeight = '40px';
            } else {
                expandedSection.classList.add('active');
                expandIcon.classList.remove('bi-chevron-down');
                expandIcon.classList.add('bi-chevron-up');

                // Динамически рассчитываем высоту
                const tasksHeight = group.Value.Count * 60; // Примерно 60px на задачу
                groupElement.style.height = 'auto';
                groupElement.style.minHeight = Math.max(40, tasksHeight) + 'px';
            }
        }
    </script>

</div>

<!-- Модальное окно добавления -->
<div class="modal fade" id="addObjectiveModal" tabindex="-1" aria-labelledby="addObjectiveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addObjectiveModalLabel">Добавить новую задачу</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="AddObjective" method="post" id="addObjectiveForm" onsubmit="return validateTimeForm('addObjectiveForm')">
                    <input type="hidden" name="day" value="@Model.Day" />
                    <div class="mb-3">
                        <label for="addTitle" class="form-label">Название:</label>
                        <input type="text" class="form-control" id="addTitle" name="Title" required />
                        <div class="invalid-feedback">Пожалуйста, введите название задачи</div>
                    </div>
                    <div class="mb-3">
                        <label for="addDescription" class="form-label">Описание:</label>
                        <textarea class="form-control" id="addDescription" name="Description" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="addStartTime" class="form-label">Время начала:</label>
                            <input type="time" class="form-control" id="addStartTime" name="StartTime" required />
                            <div class="invalid-feedback">Пожалуйста, выберите время начала</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="addEndTime" class="form-label">Время окончания:</label>
                            <input type="time" class="form-control" id="addEndTime" name="EndTime" />
                            <div class="invalid-feedback">Время окончания должно быть позже времени начала</div>
                        </div>
                    </div>
                    <div class="form-check mb-3">
                        <input type="hidden" name="AddReminder" value="false" />
                        <input class="form-check-input" type="checkbox" id="addReminder" name="AddReminder" value="true" />
                        <label class="form-check-label" for="addReminder">Добавить напоминание</label>
                    </div>
                    <div id="addReminderSection" class="mb-3 d-none">
                        <label for="addReminderTime" class="form-label">Время напоминания:</label>
                        <input type="time" class="form-control" id="addReminderTime" name="ReminderTime" />
                        <div class="invalid-feedback">Время напоминания должно быть раньше времени начала задачи</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="submitTimeForm('addObjectiveForm')">Сохранить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно деталей -->
<div class="modal fade" id="objectiveDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="objectiveDetailsTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="objectiveDetailsTime" class="mb-3 text-muted"></div>
                <div id="objectiveDetailsDescription" class="mb-3"></div>
                <div id="objectiveDetailsStatus" class="mb-3">
                    <span class="badge" id="objectiveStatusBadge"></span>
                </div>
                <div id="objectiveDetailsReminder" class="mb-3">
                    <h6>Напоминание:</h6>
                    <span id="reminderTime"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                <button type="button" class="btn btn-success" id="completeObjectiveBtn"
                        onclick="completeObjective()">Отметить выполненным</button>
                <button type="button" class="btn btn-primary" onclick="showEditFromDetails()">Редактировать</button>
                <button type="button" class="btn btn-danger" onclick="showDeleteFromDetails()">Удалить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно редактирования -->
<div class="modal fade" id="editObjectiveModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактировать задачу</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="EditObjective" method="post" id="editObjectiveForm" onsubmit="return validateTimeForm('editObjectiveForm')">
                    <input type="hidden" name="ObjectiveId" id="editObjectiveId" />
                    <input type="hidden" name="day" value="@Model.Day" />
                    <div class="mb-3">
                        <label for="editTitle" class="form-label">Название:</label>
                        <input type="text" class="form-control" id="editTitle" name="Title" required />
                        <div class="invalid-feedback">Пожалуйста, введите название задачи</div>
                    </div>
                    <div class="mb-3">
                        <label for="editDescription" class="form-label">Описание:</label>
                        <textarea class="form-control" id="editDescription" name="Description" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="editStartTime" class="form-label">Время начала:</label>
                            <input type="time" class="form-control" id="editStartTime" name="StartTime" required />
                            <div class="invalid-feedback">Пожалуйста, выберите время начала</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="editEndTime" class="form-label">Время окончания:</label>
                            <input type="time" class="form-control" id="editEndTime" name="EndTime" />
                            <div class="invalid-feedback">Время окончания должно быть позже времени начала</div>
                        </div>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="editIsCompleted" name="IsCompleted" />
                        <label class="form-check-label" for="editIsCompleted">Задача выполнена</label>
                    </div>
                    <div class="form-check mb-3">
                        <input type="hidden" name="AddReminder" value="false" />
                        <input class="form-check-input" type="checkbox" id="editAddReminder" name="AddReminder" value="true" />
                        <label class="form-check-label" for="editAddReminder">Добавить/изменить напоминание</label>
                    </div>
                    <div id="editReminderSection" class="mb-3 d-none">
                        <label for="editReminderTime" class="form-label">Время напоминания:</label>
                        <input type="time" class="form-control" id="editReminderTime" name="ReminderTime" />
                        <div class="invalid-feedback">Время напоминания должно быть раньше времени начала задачи</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="submitTimeForm('editObjectiveForm')">Обновить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно удаления -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Подтверждение удаления</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Вы действительно хотите удалить эту задачу?</p>
                <p><strong>Название: </strong><span id="deleteObjectiveTitle"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Удалить</button>
            </div>
        </div>
    </div>
</div>

@functions {
    public string GetRussianDayName(DayOfWeek day)
    {
        switch (day)
        {
            case DayOfWeek.Monday: return "Понедельник";
            case DayOfWeek.Tuesday: return "Вторник";
            case DayOfWeek.Wednesday: return "Среда";
            case DayOfWeek.Thursday: return "Четверг";
            case DayOfWeek.Friday: return "Пятница";
            case DayOfWeek.Saturday: return "Суббота";
            case DayOfWeek.Sunday: return "Воскресенье";
            default: return day.ToString();
        }
    }
}

@section Scripts {
    <script>
        let currentObjectiveId = null;

        // Новые функции для работы только с временем (без даты)
        function validateTimeForm(formId) {
            const form = document.getElementById(formId);
            const formElements = form.elements;

            // Важно: отключаем стандартную HTML5 валидацию формы
            form.noValidate = true;

            // Сброс предыдущих ошибок
            const invalidFields = form.querySelectorAll('.is-invalid');
            invalidFields.forEach(field => field.classList.remove('is-invalid'));

            // Удаляем все дополнительные сообщения об ошибках
            const errorMessages = form.querySelectorAll('.invalid-feedback-custom');
            errorMessages.forEach(msg => msg.remove());

            // Проверка названия
            const titleInput = formId === 'addObjectiveForm' ? formElements.Title : document.getElementById('editTitle');
            if (!titleInput.value.trim()) {
                titleInput.classList.add('is-invalid');
                const errorMsg = titleInput.parentNode.querySelector('.invalid-feedback');
                if (errorMsg) errorMsg.style.display = 'block';
                return false;
            }

            // Обработка пустого описания - заменяем пустое описание на пробел
            const descriptionInput = formId === 'addObjectiveForm' ?
                formElements.Description : document.getElementById('editDescription');
            if (!descriptionInput.value.trim()) {
                descriptionInput.value = " ";
            }

            // Проверка времени начала
            const startTimeInput = formId === 'addObjectiveForm' ?
                formElements.StartTime : document.getElementById('editStartTime');

            // Скрываем стандартное сообщение об ошибке
            const standardStartTimeError = startTimeInput.parentNode.querySelector('.invalid-feedback');
            if (standardStartTimeError) standardStartTimeError.style.display = 'none';

            if (!startTimeInput.value) {
                startTimeInput.classList.add('is-invalid');
                // Показываем стандартное сообщение
                if (standardStartTimeError) standardStartTimeError.style.display = 'block';
                return false;
            }

            // Проверка времени окончания, если указано
            const endTimeInput = formId === 'addObjectiveForm' ?
                formElements.EndTime : document.getElementById('editEndTime');

            // Скрываем стандартное сообщение об ошибке
            const standardEndTimeError = endTimeInput.parentNode.querySelector('.invalid-feedback');
            if (standardEndTimeError) standardEndTimeError.style.display = 'none';

            if (endTimeInput.value) {
                // Проверка что конец после начала
                if (endTimeInput.value <= startTimeInput.value) {
                    endTimeInput.classList.add('is-invalid');
                    // Стандартное сообщение об ошибке
                    if (standardEndTimeError) standardEndTimeError.style.display = 'block';
                    return false;
                }
            }

            // Проверка времени напоминания, если выбрано
            const reminderCheckbox = formId === 'addObjectiveForm' ?
                formElements.AddReminder : document.getElementById('editAddReminder');

            if (reminderCheckbox.checked) {
                const reminderTimeInput = formId === 'addObjectiveForm' ?
                    formElements.ReminderTime : document.getElementById('editReminderTime');

                // Скрываем стандартное сообщение об ошибке
                const standardReminderError = reminderTimeInput.parentNode.querySelector('.invalid-feedback');
                if (standardReminderError) standardReminderError.style.display = 'none';

                if (!reminderTimeInput.value) {
                    reminderTimeInput.classList.add('is-invalid');
                    // Показываем стандартное сообщение
                    if (standardReminderError) standardReminderError.style.display = 'block';
                    return false;
                }

                // Проверка что напоминание раньше начала
                if (reminderTimeInput.value >= startTimeInput.value) {
                    reminderTimeInput.classList.add('is-invalid');
                    if (standardReminderError) standardReminderError.style.display = 'block';
                    return false;
                }
            }

            return true;
        }

        function submitTimeForm(formId) {
            // Сначала запускаем валидацию с помощью существующей функции validateTimeForm
            if (validateTimeForm(formId)) {
                // Если валидация прошла успешно, получаем элемент формы
                const form = document.getElementById(formId);
                // Отправляем форму напрямую.
                // Браузер отправит значения из полей <input type="time">
                // в виде строк "HH:mm", что и ожидает контроллер.
                form.submit();
            }
            // Если validateTimeForm возвращает false, она должна сама
            // обработать показ сообщений об ошибках, и отправка формы будет остановлена.
        }

        function GetRussianDayName(dayIndex) {
            // dayIndex - принимает значения от 0 до 6, где 0 - понедельник, 6 - воскресенье
            const daysRussian = [
                'Понедельник',   // 0
                'Вторник',       // 1
                'Среда',         // 2
                'Четверг',       // 3
                'Пятница',       // 4
                'Суббота',       // 5
                'Воскресенье'    // 6
            ];

            return daysRussian[dayIndex] || 'Неизвестный день';
        }

        async function showObjectiveDetails(objectiveId) {
            currentObjectiveId = objectiveId;
            const response = await fetch(`/Schedule/GetObjective?objectiveId=${objectiveId}`);
            const data = await response.json();

            document.getElementById('objectiveDetailsTitle').textContent = data.title;
            document.getElementById('objectiveDetailsTime').textContent =
                `${data.startTime} - ${data.endTime || '—'}`;
            document.getElementById('objectiveDetailsDescription').textContent = data.description || 'Нет описания';
            const statusBadge = document.getElementById('objectiveStatusBadge');
            statusBadge.textContent = data.isCompleted ? 'Выполнено' : 'В процессе';
            statusBadge.className = `badge ${data.isCompleted ? 'bg-success' : 'bg-warning'}`;

            const reminderSection = document.getElementById('objectiveDetailsReminder');
            const reminderTime = document.getElementById('reminderTime');
            if (data.reminderTime) {
                reminderSection.classList.remove('d-none');
                reminderTime.textContent = data.reminderTime;
            } else {
                reminderSection.classList.add('d-none');
            }

            // Показываем/скрываем кнопку завершения в зависимости от статуса
            const completeBtn = document.getElementById('completeObjectiveBtn');
            if (data.isCompleted) {
                completeBtn.classList.add('d-none');
            } else {
                completeBtn.classList.remove('d-none');
            }

            new bootstrap.Modal(document.getElementById('objectiveDetailsModal')).show();
        }

        async function showEditModal(objectiveId) {
            currentObjectiveId = objectiveId;
            const response = await fetch(`/Schedule/GetObjective?objectiveId=${objectiveId}`);
            const data = await response.json();

            document.getElementById('editObjectiveId').value = data.objectiveId;
            document.getElementById('editTitle').value = data.title;
            document.getElementById('editDescription').value = data.description || '';
            
            // Преобразуем время из строки "HH:MM" в формат для input type="time"
            document.getElementById('editStartTime').value = data.startTime;
            document.getElementById('editEndTime').value = data.endTime || '';
            document.getElementById('editIsCompleted').checked = data.isCompleted;
            
            // Настройка напоминания
            document.getElementById('editAddReminder').checked = !!data.reminderTime;
            document.getElementById('editReminderTime').value = data.reminderTime || '';
            document.getElementById('editReminderSection').classList.toggle('d-none', !data.reminderTime);

            new bootstrap.Modal(document.getElementById('editObjectiveModal')).show();
        }

        function showDeleteModal(objectiveId, title) {
            currentObjectiveId = objectiveId;
            document.getElementById('deleteObjectiveTitle').textContent = title;
            new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
        }

        function showEditFromDetails() {
            document.getElementById('objectiveDetailsModal').querySelector('.btn-close').click();
            showEditModal(currentObjectiveId);
        }

        function showDeleteFromDetails() {
            document.getElementById('objectiveDetailsModal').querySelector('.btn-close').click();
            const title = document.getElementById('objectiveDetailsTitle').textContent;
            showDeleteModal(currentObjectiveId, title);
        }

        async function completeObjective() {
            await fetch(`/Schedule/CompleteObjective`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `objectiveId=${currentObjectiveId}&day=${@((int)Model.Day)}`
            });
            location.reload();
        }

        document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
            await fetch(`/Schedule/DeleteObjective`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `objectiveId=${currentObjectiveId}&day=${@((int)Model.Day)}`
            });
            location.reload();
        });

        document.getElementById('addReminder').addEventListener('change', function () {
            document.getElementById('addReminderSection').classList.toggle('d-none', !this.checked);
            if (!this.checked) {
                document.getElementById('addReminderTime').value = '';
            }
        });
        document.getElementById('editAddReminder').addEventListener('change', function () {
           document.getElementById('editReminderSection').classList.toggle('d-none', !this.checked);
            if (!this.checked) {
                document.getElementById('editReminderTime').value = '';
            }
        });
    </script>
}